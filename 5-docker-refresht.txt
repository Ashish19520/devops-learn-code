docker run -it node   ->this will open an interactive mode for us or nodejs temrinal
images take a snap of existing code and it is a read only


images are layers based and only that layers are run which ypu change
and if one layer changes all subsequent layers get executed


Attached and deattached container

when we restart a container the process is deattached in command line
but when we start the container first it run in attached mode to the command line

use -d to run in detached mode while creating a new image

suppose we have to input something from terminal if we run this in deattached mode we face error 
suppose taking two numbers from user and show the sum 

so we use -it interactive terminal mode
also use  -a means attached mode

you can add -rm command while running the container and this wiol automatically remove the container when container goes down

docker run -p 3000:80 -d -rm hello-node

copy command allows you to add or extract something from a running or stop container to local machine

#########   docker cp dummy/hello.txt  my-node-app:/hello   

above is the docker copy command that take source and destination and copy source to destination folder and rate a new one if folder does't exist
without restart or stop the container

### tags ####

docker run -p 3000:80 -d -rm --name hello-node-container -> this will add a tag to container hello -node container

for images it is break in two a name and a tag
ex-> node:18
    node:latest
    here node is a name of repository and 18,latest alpine all are tags
    that means a repository can have multiple images

    to create use

######  docker built -t node-app/todolist


####### to check the logs of a running continer use

-> docker logs running-container-name


   #### volumes ####
    

    two types are there named and anonyms
    anoynms are manage by dokcer they are delete when we stop a container
    but named are managed by us 

    we can persist the data in our host machine from docker-container

    to do use

    -> docker run -d -p 3000:80 --rm --name feedback-app -V feedback:/app/feedback feedback-node:volumes

                                                       | v form volume and feedback is the folder of host machine   |  name of iamge    
                                                        and  app/feedback is the folder created in running container

###########  BIND MOUNTS ###########  RUNNING FOR DEVELOPMENT #####

generally we take a snapshot of the code for image and if we change something in development we have to rebuild eerything

in bind mounts localhost project code dominate the code in th container



###->>>  docker run -d --rm -p 3000:80 --name feedback-app -v feedback:/app/feedback -v $(pwd):/app feedback-node:volumes


now with the above comand internal code start overide container code what we change in internal node code in html 
is start refleccting in docker runing container


for nodejs specific development container we use nodemon in devdependiceies and change the docker script



generally volumes are read and write but we can force them to read only by puttin ro after the container app stands for read only

###->>>  docker run -d --rm -p 3000:80 --name feedback-app -v feedback:/app/feedback -v $(pwd):/app:ro feedback-node:volumes



use command to get the list of the all volumes  
->#### docker volume ls    

to see information of named volumes use

-->> #### docker volume inspect feedback
to remove a vlume use ###-> docker volum rm feedback
use docker volume prune  -> to get rid of all volumes which are not in use

######### ARGUMENTS AND RUNTIME ENVIRONMENT VARIABLES ########

docker support built-time ARGuments and run time ENVironment variables 

we can add env variables in docker file 

like 

ENV PORT 80
EXPOSE $PORT

also in command when we are going to start the container we can add port like


#####->>docker run -d --rm -p 3000:80  --env PORT=8000 --name feedback-app feedback-node:volumes


like above we can add multipele variables in it .

we can use -e instead of --env
-e PRT=5000 -e NAME=ashish

and if u want to read the value from the env file 
create a .env file in the root of the project and add PORT=4000;

and use the command below

#####->>docker run -d --rm -p 3000:80  --env-file ./.env PORT=8000 --name feedback-app feedback-node:volumes
                                       ------------------
                                       ignore the underscores this is to highlight that from now all env variables are going to read fron
                                        there that is .env file     

##### docker netwerking and communication

3 cases can be there

1-> docker want to access to some api host on WWW
2->docker container want to communicate with another container
3-> docker container talk to some services running on our localhost or host machine



by default container can communicate with world->container -> to WWW without any extra settings

and to communicate with the host machine on some service of some port 
instead of using ( localhost  -> use ->host.docker.internal    instead of localhost)
                                       --------------------

for to ci=ommunicate container to container use
#inspect command to inspect and take ip address of the running container and hit that address on the default port


##### container network ####
we can communicate n number of container to each other just by creating a network
use command ####--> 
                    docker run -d --name container-name --network favourites-network image-name
                                                        ----------------------------
                                                        here we running the container on a network favourites network
and we can add n number of container on favourites-network or the network we just create of those containers are on same 
network can talk to each other

to create a network use command    ####--> docker network create favourites-network
to inspect the netwoek     use #####->>>###  docker network ls

and use the name of container to communicate each other instead of ip or host.docker.internal
                    ---------                                            --------------------